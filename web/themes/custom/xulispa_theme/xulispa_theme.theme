<?php

/**
 * @file
 * Functions to support theming in the theme xulispa_theme.
 */

use Drupal\Component\Serialization\Json;
use Drupal\file\Entity\File;
use Drupal\Component\Utility\Crypt;
use GuzzleHttp\Exception\RequestException;
use Drupal\Core\File\FileSystemInterface;

/**
 * Implements hook_css_alter().
 */
function xulispa_theme_css_alter(&$vars) {
  $localhost = array('127.0.0.1');
  if (in_array($_SERVER['REMOTE_ADDR'], $localhost)) {
    foreach ($vars as $key => $val) {
      $vars[$key]['preprocess'] = FALSE;
    }
  }
}

/**
 * Implements hook_theme().
 */
function xulispa_theme_theme($existing, $type, $theme, $path) {
  return [
    'paragraph__text' => [
      'variables' => [
        'clip_alert_style' => 'tooltip',
        'clip_alert_text' => t('Copy was successful!'),
        'clip_height' => 25,
        'clip_width' => 25,
      ],
      'base hook' => 'paragraph',
    ],
    // 'media__external_video' => [
    //   'variables' => [
    //     'width' => '100%',
    //     'height' => '100%',
    //   ],
    //   'base hook' => 'media',
    // ],
  ];
}

/**
 * Implements hook_preprocess_page().
 */
function xulispa_theme_preprocess_page(&$vars) {
  $xulispa_theme_custom_css_enable = theme_get_setting('xulispa_theme_custom_css_enable');
  if ($xulispa_theme_custom_css_enable == 1) {
    $vars['#attached']['library'][] = 'xulispa_theme/xulispa_theme';
  }

  $theme = \Drupal::theme()->getActiveTheme()->getName();
  $config = \Drupal::config($theme . '.settings');
  $sections = array('first', 'second', 'third', 'fourth', 'fifth');

  foreach ($sections as $section) {
    $bg = $config->get('bg_upload_' . $section);
    if(isset($bg_image)) {
      if($bg_image = File::load($bg[0])) {
        $vars['page']['bg_images']['section_' . $section] = file_create_url($bg_image->getFileUri());
      }
    }
  }
  $vars['page']['active_theme_name'] = $theme;
  return $theme;
}

/**
 * Implements hook_preprocess_html().
 */
function xulispa_theme_preprocess_html(&$vars) {
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  $config = \Drupal::config($theme . '.settings');
  $library_cache_url = 'https://rawgit.com/dixonandmoe/rellax/master/rellax.js';
  $library_cache_url_cycle = 'https://rawgit.com/malsup/cycle/master/jquery.cycle.all.js';

  if ($config->get('xulispa_theme_cache') && $url = _xulispa_theme_cache($library_cache_url)) {
    if (in_array('xulispa_theme/xulispa_theme', $vars['page']['#attached']['library'])) {
      $index = array_search('xulispa_theme/xulispa_theme', $vars['page']['#attached']['library']);
      unset($vars['page']['#attached']['library'][$index]);
    }

    $vars['cached_js'][] = array(
      '#type' => 'html_tag',
      '#tag' => 'script',
      '#attributes' => array(
        'src' => $url,
      ),
    );
  }

  if ($config->get('xulispa_theme_cache') && $url = _xulispa_theme_cache($library_cache_url_cycle)) {
    if (in_array('xulispa_theme/xulispa_theme', $vars['page']['#attached']['library'])) {
      $index = array_search('xulispa_theme/xulispa_theme', $vars['page']['#attached']['library']);
      unset($vars['page']['#attached']['library'][$index]);
    }

    $vars['cached_js'][] = array(
      '#type' => 'html_tag',
      '#tag' => 'script',
      '#attributes' => array(
        'src' => $url,
      ),
    );
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function xulispa_theme_preprocess_paragraph(&$vars) {
  if (isset($vars['elements']['#object']) && !empty($vars['elements']['#object']->field_content)) {
    $vars['elements'] = [];
    foreach (\Drupal\Core\Render\Element::children($vars['elements']) as $item) {
      // dump($vars);
      // die();
      $vars['elements'][$item] = $vars['elements'][$item];
      $object = $vars['elements']['#object']->field_content;
      $id = $object->target_id;
      $entity = $object->entity;

      $clip_id = $entity->bundle() . $id;
      $clip_text = $entity->field_text->value;
      $clip_alert_style = 'tooltip';
      $clip_alert_text = t('Copy was successful!');
      $clip_height = 25;
      $clip_width = 25;
      $clip_module_path = \Drupal::theme()->getActiveTheme()->getPath();
      $clip_attached[]['element']['#attached']['library'] = 'clipboardjs/drupal';

      $vars['elements']['clip_id'] = $clip_id;
      $vars['elements']['clip_text'] = $clip_text;
      $vars['elements']['clip_alert_style'] = $clip_alert_style;
      $vars['elements']['clip_alert_text'] = $clip_alert_text;
      $vars['elements']['clip_height'] = $clip_height;
      $vars['elements']['clip_width'] = $clip_width;
      $vars['elements']['clip_module_path'] = $clip_module_path;
      $vars['elements']['clip_attached'] = $clip_attached;

      $vars['attributes']['clip_id'] = $clip_id;
      $vars['attributes']['clip_text'] = $clip_text;
      $vars['attributes']['clip_alert_style'] = $clip_alert_style;
      $vars['attributes']['clip_alert_text'] = $clip_alert_text;
      $vars['attributes']['clip_height'] = $clip_height;
      $vars['attributes']['clip_width'] = $clip_width;
      $vars['attributes']['clip_module_path'] = $clip_module_path;
      $vars['attributes']['clip_attached'] = $clip_attached;

    }
  }
}

/**
* Implements hook_preprocess_HOOK().
*/
// function xulispa_theme_preprocess_media(&$vars) {
  // $extvid = '';
  // if (isset($vars['elements']['#media']) && !empty($vars['elements']['#media']->field_media_video_embed_field)) {
  //   $media = $vars['elements']['#media'];
  //   // if (isset($vars['content']) && !empty($vars['content']['field_media_video_embed_field'])) {
  //     // $vars['content'] = [];
  //   $attributes = $vars['elements']['field_media_video_embed_field'][0]['#attributes'];
  //     // $elements = $attributes;
  //     // $elements = ['elements']['field_media_video_embed_field'][0]['#attributes'];
  //     // dump($attributes);
  //     // die();
  //     // $attributes['#theme'] = [
  //     //   '#theme' => 'media__external_video'
  //     // ];
  //   $attributes['width'] = '100%';
  //   $attributes['height'] = '100%';
  //   $attributes['class'][] = 'responsive';
  //   $attributes['class'][] = 'fill';
  //   $attributes['external_id'] = $media->mid->value;
  //   $attributes['external_title'] = $media->name->value;
  //   $attributes['external_url'] = $media->field_media_video_embed_field->value;
  //   // $attributes['external_src'] = $attributes['src']->value;
  //   // $extvid = Json::encode($attributes);

  //     // $vars[$elements]['#width'] = $attributes['width'];
  //     // $vars[$elements]['#height'] = $attributes['height'];
  //     // $vars[$elements]['#external_id'] = $attributes['external_id'];
  //     // $vars[$elements]['#external_title'] = $attributes['external_title'];
  //     // $vars[$elements]['#external_url'] = $attributes['external_url'];
  //     // $vars['content']['external_src'] = $attributes['external_src'];

  //     // $vars['content']['field_media_video_embed_field'][0]['#external_url'] = $extvid;

  //     // $content = \Drupal\Core\Render\Element::children($vars['content']);//['field_media_video_embed_field']);
  //     // $content = \Drupal\Core\Render\Element:($attributes);//['field_media_video_embed_field']);

  //     // dump($vars['content']);
  //     // dump($media);
  //     // dump($extvid);
  //     // dump($attributes);
  //   // }
  //   // die();

  // }
  // return $extvid;
// }

/**
 * Download/Synchronize/Cache JS file locally.
 *
 * @param string $location
 *   The full URL to the external javascript file.
 * @param bool $synchronize
 *   Synchronize to local cache if remote file has changed.
 *
 * @return mixed
 *   The path to the local javascript file on success, boolean FALSE on failure.
 */
function _xulispa_theme_cache($location, $synchronize = FALSE) {
  $path = 'public://xulispa_theme';
  $file_destination = $path . '/' . basename($location);

  if (!file_exists($file_destination) || $synchronize) {
    // Download the latest JS file.
    try {
      $data = \Drupal::httpClient()
        ->get($location)
        ->getBody(TRUE);

      if (file_exists($file_destination)) {
        // Synchronize JS file replace local file if outdated.
        $data_hash_local = Crypt::hashBase64(file_get_contents($file_destination));
        $data_hash_remote = Crypt::hashBase64($data);
        // Check that the files directory is writable.
        if ($data_hash_local != $data_hash_remote && \Drupal::service('file_system')->prepareDirectory($path)) {
          // Save updated JS file to disk.
          \Drupal::service('file_system')->saveData($data, $file_destination, FileSystemInterface::EXISTS_REPLACE);
          \Drupal::logger('xulispa_theme')->info('Locally cached JS file has been updated.');

          // Change query-strings on css/js files to enforce reload for all
          // users.
          _drupal_flush_css_js();
        }
      }
      else {
        // Check that the files directory is writable.
        if (\Drupal::service('file_system')->prepareDirectory($path, FileSystemInterface::CREATE_DIRECTORY)) {
          // There is no need to flush JS here as core refreshes JS caches
          // automatically, if new files are added.
          \Drupal::service('file_system')->saveData($data, $file_destination, FileSystemInterface::EXISTS_REPLACE);
          \Drupal::logger('xulispa_theme')->info('Locally cached JS file has been saved.');

          // Return the local JS file path.
          return file_url_transform_relative(file_create_url($file_destination));
        }
      }
    }
    catch (RequestException $exception) {
      watchdog_exception('xulispa_theme', $exception);
    }
  }
  else {
    // Return the local JS file path.
    return file_url_transform_relative(file_create_url($file_destination));
  }
}

/**
 * Delete cached files and directory.
 */
function xulispa_theme_clear_js_cache() {
  $path = 'public://xulispa_theme';
  if (\Drupal::service('file_system')->prepareDirectory($path)) {
    \Drupal::service('file_system')->scanDirectory($path, '/.*/', ['callback' => 'file_unmanaged_delete']);
    \Drupal::service('file_system')->rmdir($path);

    // Change query-strings on css/js files to enforce reload for all users.
    _drupal_flush_css_js();

    \Drupal::logger('xulispa_theme')->info('Local cache has been purged.');
  }
}
